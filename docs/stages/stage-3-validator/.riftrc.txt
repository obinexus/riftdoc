# =================================================================
# RIFT Governance Validation CMake Configuration
# OBINexus AEGIS Methodology Compliance
# Phase-Gated Build Integration with Systematic Validation
# =================================================================

cmake_minimum_required(VERSION 3.16)
project(rift_governance_validator VERSION 1.0.0 LANGUAGES C)

# AEGIS Methodology Configuration
set(AEGIS_COMPLIANCE_ENABLED ON CACHE BOOL "Enable AEGIS methodology compliance checks")
set(RIFT_GOVERNANCE_STRICT_MODE OFF CACHE BOOL "Enable strict governance validation mode")
set(SEMVERX_VALIDATION_ENABLED ON CACHE BOOL "Enable SemVerX validation through NLink")

# Phase Gate Configuration
set(PHASE_GATE_REQUIREMENTS ON CACHE BOOL "Enforce phase gate requirements")
set(GOVERNANCE_VALIDATION_REQUIRED ON CACHE BOOL "Require governance validation for builds")

# Compiler Configuration - AEGIS Standards
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# AEGIS Security Flags
add_compile_options(
    -Wall -Wextra -Wpedantic -Werror
    -fstack-protector-strong
    -D_FORTIFY_SOURCE=2
    -fPIE
)

add_link_options(
    -Wl,-z,relro
    -Wl,-z,now
    -pie
)

# Dependency Resolution - External Libraries
find_package(PkgConfig REQUIRED)

# cJSON Library for JSON parsing
pkg_check_modules(CJSON REQUIRED libcjson)
if(NOT CJSON_FOUND)
    message(FATAL_ERROR "libcjson not found - required for governance file parsing")
endif()

# OpenSSL for cryptographic operations
find_package(OpenSSL REQUIRED)
if(NOT OpenSSL_FOUND)
    message(FATAL_ERROR "OpenSSL not found - required for SHA-256 hash validation")
endif()

# Source Configuration
set(GOVERNANCE_VALIDATOR_SOURCES
    rift_governance_validator.c
)

set(GOVERNANCE_VALIDATOR_HEADERS
    rift_governance.h
)

# Target Definition
add_executable(rift_governance_validator ${GOVERNANCE_VALIDATOR_SOURCES})

# Include Directories
target_include_directories(rift_governance_validator PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CJSON_INCLUDE_DIRS}
    ${OPENSSL_INCLUDE_DIR}
)

# Library Linkage
target_link_libraries(rift_governance_validator
    ${CJSON_LIBRARIES}
    ${OPENSSL_LIBRARIES}
)

# Compilation Definitions
target_compile_definitions(rift_governance_validator PRIVATE
    RIFT_VERSION_STRING="${PROJECT_VERSION}"
    AEGIS_COMPLIANCE_ENABLED=$<BOOL:${AEGIS_COMPLIANCE_ENABLED}>
    RIFT_GOVERNANCE_STRICT_MODE=$<BOOL:${RIFT_GOVERNANCE_STRICT_MODE}>
)

# =================================================================
# PHASE GATE INTEGRATION - AEGIS METHODOLOGY COMPLIANCE
# =================================================================

# Phase Gate 1: Requirements Validation
if(PHASE_GATE_REQUIREMENTS)
    # Verify all required dependencies are available
    if(NOT CJSON_FOUND OR NOT OpenSSL_FOUND)
        message(FATAL_ERROR "Phase Gate 1 Failed: Missing required dependencies")
    endif()
    
    # Verify AEGIS compliance flags are set
    if(NOT AEGIS_COMPLIANCE_ENABLED)
        message(FATAL_ERROR "Phase Gate 1 Failed: AEGIS compliance not enabled")
    endif()
    
    message(STATUS "Phase Gate 1 Passed: Requirements validation complete")
endif()

# Phase Gate 2: Build Validation
add_custom_target(phase_gate_2_build_validation
    COMMAND ${CMAKE_COMMAND} -E echo "Phase Gate 2: Build validation in progress..."
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/logs
    COMMAND ${CMAKE_COMMAND} -E touch ${CMAKE_BINARY_DIR}/logs/build_validation.log
    COMMENT "AEGIS Phase Gate 2: Build validation checkpoint"
)

add_dependencies(rift_governance_validator phase_gate_2_build_validation)

# Phase Gate 3: Governance Pre-Validation
add_custom_target(phase_gate_3_governance_check
    COMMAND ${CMAKE_COMMAND} -E echo "Phase Gate 3: Pre-compilation governance validation..."
    COMMAND ${CMAKE_COMMAND} -E echo "Checking for required governance files..."
    COMMAND test -f ${CMAKE_SOURCE_DIR}/.riftrc || (echo "Missing primary .riftrc file" && exit 1)
    COMMAND ${CMAKE_COMMAND} -E echo "Phase Gate 3: Governance structure validation passed"
    COMMENT "AEGIS Phase Gate 3: Governance structure validation"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

if(GOVERNANCE_VALIDATION_REQUIRED)
    add_dependencies(rift_governance_validator phase_gate_3_governance_check)
endif()

# =================================================================
# SYSTEMATIC TESTING CONFIGURATION
# =================================================================

# Enable testing framework
enable_testing()

# Unit Test Configuration
add_executable(test_governance_validator
    test_governance_validator.c
    rift_governance_validator.c
)

target_include_directories(test_governance_validator PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CJSON_INCLUDE_DIRS}
    ${OPENSSL_INCLUDE_DIR}
)

target_link_libraries(test_governance_validator
    ${CJSON_LIBRARIES}
    ${OPENSSL_LIBRARIES}
)

target_compile_definitions(test_governance_validator PRIVATE
    UNIT_TESTING_ENABLED=1
    RIFT_VERSION_STRING="${PROJECT_VERSION}"
)

# Test Cases
add_test(NAME test_governance_parsing
         COMMAND test_governance_validator --test-parsing)

add_test(NAME test_timestamp_validation
         COMMAND test_governance_validator --test-timestamp)

add_test(NAME test_semverx_integration
         COMMAND test_governance_validator --test-semverx)

add_test(NAME test_stage5_security
         COMMAND test_governance_validator --test-stage5)

# Integration Test - Full Pipeline Validation
add_test(NAME integration_test_full_pipeline
         COMMAND rift_governance_validator ${CMAKE_SOURCE_DIR} --verbose --strict
         WORKING_DIRECTORY ${CMAKE_BINARY_DIR})

# =================================================================
# INSTALLATION CONFIGURATION
# =================================================================

# Install the governance validator
install(TARGETS rift_governance_validator
        RUNTIME DESTINATION bin
        COMPONENT governance_tools)

# Install header files for library integration
install(FILES ${GOVERNANCE_VALIDATOR_HEADERS}
        DESTINATION include/rift/governance
        COMPONENT development)

# Install governance schema files
install(FILES ${CMAKE_SOURCE_DIR}/governance_schema.json
        DESTINATION share/rift/schemas
        COMPONENT schemas)

# =================================================================
# NLINK INTEGRATION CONFIGURATION
# =================================================================

# NLink Integration Target
if(SEMVERX_VALIDATION_ENABLED)
    find_program(NLINK_EXECUTABLE nlink
                 PATHS ${CMAKE_SOURCE_DIR}/bin /usr/local/bin /usr/bin
                 DOC "NLink SemVerX validation executable")
    
    if(NLINK_EXECUTABLE)
        message(STATUS "NLink found: ${NLINK_EXECUTABLE}")
        
        # NLink validation target
        add_custom_target(nlink_validation
            COMMAND ${NLINK_EXECUTABLE} --semverx-validate --project-root ${CMAKE_SOURCE_DIR}
            COMMENT "Executing NLink SemVerX validation"
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        )
        
        # Integrate NLink validation into build process
        add_dependencies(rift_governance_validator nlink_validation)
    else()
        message(WARNING "NLink executable not found - SemVerX validation disabled")
        set(SEMVERX_VALIDATION_ENABLED OFF)
    endif()
endif()

# =================================================================
# DOCUMENTATION GENERATION
# =================================================================

# Doxygen Documentation
find_package(Doxygen OPTIONAL_COMPONENTS dot)

if(DOXYGEN_FOUND)
    set(DOXYGEN_PROJECT_NAME "RIFT Governance Validation Engine")
    set(DOXYGEN_PROJECT_BRIEF "AEGIS Methodology Compliance Framework")
    set(DOXYGEN_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/docs)
    set(DOXYGEN_GENERATE_HTML YES)
    set(DOXYGEN_GENERATE_XML YES)
    set(DOXYGEN_EXTRACT_ALL YES)
    set(DOXYGEN_EXTRACT_PRIVATE YES)
    set(DOXYGEN_EXTRACT_STATIC YES)
    
    doxygen_add_docs(governance_documentation
        ${GOVERNANCE_VALIDATOR_SOURCES} ${GOVERNANCE_VALIDATOR_HEADERS}
        COMMENT "Generating AEGIS governance documentation"
    )
endif()

# =================================================================
# CONTINUOUS INTEGRATION HOOKS
# =================================================================

# Pre-commit Hook Integration
add_custom_target(install_pre_commit_hooks
    COMMAND ${CMAKE_COMMAND} -E copy
            ${CMAKE_SOURCE_DIR}/scripts/pre-commit-governance-check.sh
            ${CMAKE_SOURCE_DIR}/.git/hooks/pre-commit
    COMMAND chmod +x ${CMAKE_SOURCE_DIR}/.git/hooks/pre-commit
    COMMENT "Installing governance validation pre-commit hooks"
)

# Quality Assurance Target
add_custom_target(qa_governance_validation
    COMMAND ${CMAKE_COMMAND} -E echo "Executing comprehensive governance QA..."
    COMMAND rift_governance_validator ${CMAKE_SOURCE_DIR} --strict --verbose
    COMMAND ${CMAKE_COMMAND} -E echo "QA validation completed successfully"
    DEPENDS rift_governance_validator
    COMMENT "AEGIS QA: Comprehensive governance validation"
)

# =================================================================
# BUILD SUMMARY REPORTING
# =================================================================

# Build Configuration Summary
message(STATUS "")
message(STATUS "RIFT Governance Validation Configuration Summary:")
message(STATUS "================================================")
message(STATUS "Project Version: ${PROJECT_VERSION}")
message(STATUS "AEGIS Compliance: ${AEGIS_COMPLIANCE_ENABLED}")
message(STATUS "Strict Mode: ${RIFT_GOVERNANCE_STRICT_MODE}")
message(STATUS "SemVerX Validation: ${SEMVERX_VALIDATION_ENABLED}")
message(STATUS "Phase Gate Requirements: ${PHASE_GATE_REQUIREMENTS}")
message(STATUS "Documentation: ${DOXYGEN_FOUND}")
message(STATUS "NLink Integration: ${NLINK_EXECUTABLE}")
message(STATUS "================================================")
message(STATUS "")
